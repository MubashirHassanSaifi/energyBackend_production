{"version":3,"sources":["../node_modules/@material-ui/icons/NavigateNext.js","hooks/useIsMountedRef.js","views/management/SensorCreateView/Header.js","views/management/SensorCreateView/SensorAddForm.js","views/management/SensorCreateView/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useIsMountedRef","isMounted","useRef","useEffect","current","useStyles","makeStyles","root","Header","className","rest","classes","Grid","clsx","container","justify","spacing","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","editor","height","ProductCreateForm","history","useHistory","useState","categories","setCategories","options","setOptions","userid","setUserid","username","setUsername","loading","setLoading","isMountedRef","enqueueSnackbar","useSnackbar","getSensors","useCallback","axios","get","then","response","data","sensor","handldChangeOption","event","a","target","console","log","body","config","headers","post","res","id","name","initialValues","userCode","userName","validationSchema","Yup","shape","max","onSubmit","values","setErrors","setStatus","setSubmitting","sensorName","success","push","submit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","setFieldValue","xs","lg","Card","CardHeader","title","Divider","CardContent","TextField","fullWidth","autoFocus","label","onChange","select","SelectProps","native","defaultValue","map","category","key","Box","mt","onBlur","disabled","InputProps","readOnly","helperText","FormHelperText","error","type","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","ProductCreateView","Page","Container","maxWidth","SensorAddForm"],"mappings":"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","file":"static/js/25.c1c47e5b.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'NavigateNext');\n\nexports.default = _default;","import { useRef, useEffect } from 'react';\n\nexport default function useIsMountedRef() {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n}\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/admin/welcome\"\n            component={RouterLink}\n          >\n            Management\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/admin/management/products\"\n            component={RouterLink}\n          >\n            Sensors\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Add Sensor\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          Assign Sensor\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          component={RouterLink}\n          to=\"/admin/management/sensors\"\n        >\n          Cancel\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useEffect, useCallback, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport axios from 'axios';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\n\n// const categories = [\n//   {\n//     id: 'shirts',\n//     name: 'Shirts'\n//   },\n//   {\n//     id: 'phones',\n//     name: 'Phones'\n//   },\n//   {\n//     id: 'cars',\n//     name: 'Cars'\n//   }\n// ];\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  editor: {\n    '& .ql-editor': {\n      height: 400\n    }\n  }\n}));\n\n\nfunction ProductCreateForm({ className, ...rest }) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [categories, setCategories] = useState([]);\n  const [options, setOptions] = useState(null);\n  const [userid, setUserid] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar } = useSnackbar();\n  const getSensors = useCallback(() => {\n    axios\n      .get('http://localhost:5000/user/sensorAssignedUsers')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setCategories(response.data.sensor);\n          // setColumns(response.data.columns);\n          // setLoading(false);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getSensors();\n  }, []);\n\n\n  const handldChangeOption = async (event) => {\n    setOptions(event.target.value);\n    const sensor = event.target.value;\n    console.log(sensor);\n\n    const body = {\n      sensor\n    };\n    const config = {\n      headers: {\n        'content-type': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.post('http://localhost:5000/user/sensorAgainstUser', body, config);\n      console.log('response', res);\n      setUserid(res.data.id);\n      setUsername(res.data.name);\n      setLoading(false);\n    } catch (err) {\n      console.log(err.response);\n    }\n  };\n\n\n  return (\n    <Formik\n      initialValues={{\n        sensor: '',\n        userCode: '',\n        userName: '',\n      }}\n      validationSchema={Yup.object().shape({\n        sensor: Yup.string().max(255)\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        const body = {\n          sensorName: options\n        };\n        const config = {\n          headers: {\n            'content-type': 'application/json'\n          }\n        };\n        try {\n          const res = await axios.post('http://localhost:5000/energysensor/add', body, config);\n          console.log(res);\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar(res.data, {\n            variant: 'success'\n          });\n          history.push('/admin/management/sensors');\n        } catch (err) {\n          console.log(err.response.data);\n          setErrors({ submit: err.response.data });\n          setStatus({ success: false });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue,\n        touched,\n        values\n      }) => (\n        <form\n          onSubmit={handleSubmit}\n          className={clsx(classes.root, className)}\n          {...rest}\n        >\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              xs={12}\n              lg={8}\n            >\n              {/* <Card>\n                <CardContent>\n                  <TextField\n                    error={Boolean(touched.name && errors.name)}\n                    fullWidth\n                    helperText={touched.name && errors.name}\n                    label=\"Product Name\"\n                    name=\"name\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.name}\n                    variant=\"outlined\"\n                  />\n                  <Box\n                    mt={3}\n                    mb={1}\n                  >\n                    <Typography\n                      variant=\"subtitle2\"\n                      color=\"textSecondary\"\n                    >\n                      Description\n                    </Typography>\n                  </Box>\n                  <Paper variant=\"outlined\">\n                    <QuillEditor\n                      className={classes.editor}\n                      value={values.description}\n                      onChange={(value) => setFieldValue('description', value)}\n                    />\n                  </Paper>\n                  {(touched.description && errors.description) && (\n                    <Box mt={2}>\n                      <FormHelperText error>\n                        {errors.description}\n                      </FormHelperText>\n                    </Box>\n                  )}\n                </CardContent>\n              </Card> */}\n              {/* <Box mt={3}>\n                <Card>\n                  <CardHeader title=\"Upload Images\" />\n                  <Divider />\n                  <CardContent>\n                    <FilesDropzone />\n                  </CardContent>\n                </Card>\n              </Box> */}\n              {/* <Box mt={3}>\n                <Card>\n                  <CardHeader title=\"Prices\" />\n                  <Divider />\n                  <CardContent>\n                    <Grid\n                      container\n                      spacing={3}\n                    >\n                      <Grid item xs={12} md={6}>\n                        <TextField\n                          error={Boolean(touched.price && errors.price)}\n                          fullWidth\n                          helperText={touched.price && errors.price\n                            ? errors.price\n                            : 'If you have a sale price this will be shown as old price'}\n                          label=\"Price\"\n                          name=\"price\"\n                          type=\"number\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          value={values.price}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <TextField\n                          error={Boolean(touched.salePrice && errors.salePrice)}\n                          fullWidth\n                          helperText={touched.salePrice && errors.salePrice}\n                          label=\"Sale price\"\n                          name=\"salePrice\"\n                          type=\"number\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          value={values.salePrice}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                    </Grid>\n                    <Box mt={2}>\n                      <FormControlLabel\n                        control={(\n                          <Checkbox\n                            checked={values.isTaxable}\n                            onChange={handleChange}\n                            value={values.isTaxable}\n                            name=\"isTaxable\"\n                          />\n                        )}\n                        label=\"Product is taxable\"\n                      />\n                    </Box> */}\n              {/* <Box mt={2}>\n                      <FormControlLabel\n                        control={(\n                          <Checkbox\n                            checked={values.includesTaxes}\n                            onChange={handleChange}\n                            value={values.includesTaxes}\n                            name=\"includesTaxes\"\n                          />\n                        )}\n                        label=\"Price includes taxes\"\n                      />\n                    </Box> */}\n              {/* </CardContent> */}\n              {/* </Card> */}\n              {/* </Box> */}\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              lg={6}\n            >\n              <Card>\n                <CardHeader title=\"Select Sensor Name\" />\n                <Divider />\n                <CardContent>\n                  <TextField\n                    fullWidth\n                    autoFocus=\"true\"\n                    label=\"Sensor\"\n                    name=\"Sensor\"\n                    onChange={\n                      handldChangeOption\n                    }\n                    select\n                    SelectProps={{ native: true }}\n                    defaultValue=\" \"\n                    value={options}\n                    variant=\"outlined\"\n                  >\n                    <option>\n                      Select Sensor\n                    </option>\n                    {categories.map((category) => (\n                      <option\n                        key={category.id}\n                        value={category.name}\n                      >\n                        {category.name}\n                      </option>\n                    ))}\n\n                  </TextField>\n                  <Box mt={2}>\n                    <TextField\n                      // error={Boolean(touched.userCode && errors.userCode)}\n                      fullWidth\n                      // helperText={touched.userCode && errors.userCode}\n                      label=\"User Id\"\n                      name=\"userCode\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      defaultValue=\" \"\n                      value={userid}\n                      variant=\"outlined\"\n                      disabled={loading}\n                      InputProps={\n                         {\n                           readOnly: true,\n                         }\n                       }\n\n                    />\n                  </Box>\n                  <Box mt={2}>\n                    <TextField\n                      // focused=\"true\"\n                      // error={Boolean(touched.userName && errors.userName)}\n                      fullWidth\n                      helperText={touched.userName && errors.userName}\n                      label=\"User Name\"\n                      name=\"userName\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      defaultValue=\" \"\n                      value={username}\n                      variant=\"outlined\"\n                      disabled={loading}\n                      InputProps={\n                        {\n                          readOnly: true,\n                        }\n                      }\n\n                    />\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n          {errors.submit && (\n            <Box mt={3}>\n              <FormHelperText error>\n                {errors.submit}\n              </FormHelperText>\n            </Box>\n          )}\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={isSubmitting}\n            >\n              Add Sensor\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nProductCreateForm.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ProductCreateForm;\n","import React from 'react';\nimport { Container, makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Header from './Header';\nimport SensorAddForm from './SensorAddForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: 100\n  }\n}));\n\nfunction ProductCreateView() {\n  const classes = useStyles();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Sensor Add\"\n    >\n      <Container maxWidth=\"lg\">\n        <Header />\n        <SensorAddForm />\n      </Container>\n    </Page>\n  );\n}\n\nexport default ProductCreateView;\n"],"sourceRoot":""}