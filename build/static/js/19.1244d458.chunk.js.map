{"version":3,"sources":["../node_modules/@material-ui/icons/NavigateNext.js","hooks/useIsMountedRef.js","utils/wait.js","views/management/UserEditView/UserEditForm.js","views/management/UserEditView/Header.js","views/management/UserEditView/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useIsMountedRef","isMounted","useRef","useEffect","current","wait","time","Promise","res","setTimeout","useStyles","makeStyles","root","UserEditForm","className","user","rest","classes","enqueueSnackbar","useSnackbar","history","useHistory","userId","useParams","handleViewUser","push","initialValues","country","location","email","fullName","username","phone","state","region","validationSchema","Yup","shape","max","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","body","config","headers","axios","post","success","variant","action","Button","onClick","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","clsx","Card","CardContent","Grid","container","spacing","item","md","xs","TextField","error","Boolean","fullWidth","helperText","label","name","onBlur","onChange","required","Box","mt","color","type","disabled","Header","Breadcrumbs","separator","fontSize","aria-label","Link","to","component","RouterLink","Typography","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","UserEditView","isMountedRef","useState","setUser","getUser","useCallback","get","then","response","data","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/19.1244d458.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'NavigateNext');\n\nexports.default = _default;","import { useRef, useEffect } from 'react';\n\nexport default function useIsMountedRef() {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n}\n","export const wait = (time) => new Promise((res) => setTimeout(res, time));\n\nexport default wait;\n","import React, { useState } from 'react';\nimport {\n  useHistory,\n  useParams\n} from 'react-router-dom';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles,\n\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\n\nfunction UserEditForm({\n  className,\n  user,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const { userId } = useParams();\n\n  const handleViewUser = () => {\n    history.push('/admin/welcome');\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        country: user.location.country || '',\n        email: user.email || '',\n        fullName: user.username || '',\n        phone: user.phone || '',\n        state: user.location.state || '',\n        region: user.location.region || ''\n\n      }}\n      validationSchema={Yup.object().shape({\n        country: Yup.string().max(255),\n        email: Yup.string().email('Must be a valid email').max(255),\n        fullName: Yup.string().max(255),\n        phone: Yup.string().max(15),\n        state: Yup.string().max(255),\n        region: Yup.string().max(255)\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          const body = {\n            username: values.fullName,\n            email: values.email,\n            phone: values.phone,\n            country: values.country,\n            region: values.region,\n            state: values.state\n          };\n          const config = {\n            headers: {\n              'content-type': 'application/json'\n            }\n          };\n          const res = axios.post(`http://localhost:5000/user/update/${userId}`, body, config);\n          await wait(300);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n\n          enqueueSnackbar('Customer updated', {\n            //\n            variant: 'success',\n            // autoHideDuration: 1000,\n            action: <Button onClick={\n                handleViewUser\n              }\n            >\n              see all\n            </Button>,\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n\n          <Card>\n            <CardContent>\n\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.fullName && errors.fullName)}\n                    fullWidth\n                    helperText={touched.fullName && errors.fullName}\n                    label=\"Full name\"\n                    name=\"fullName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.fullName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.state && errors.state)}\n                    fullWidth\n                    helperText={touched.state && errors.state}\n                    label=\"State/Region\"\n                    name=\"state\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.state}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {/* <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address1 && errors.address1)}\n                    fullWidth\n                    helperText={touched.address1 && errors.address1}\n                    label=\"Address 1\"\n                    name=\"address1\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address1}\n                    variant=\"outlined\"\n                  />\n                </Grid> */}\n                {/* <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address2 && errors.address2)}\n                    fullWidth\n                    helperText={touched.address2 && errors.address2}\n                    label=\"Address 2\"\n                    name=\"address2\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address2}\n                    variant=\"outlined\"\n                  />\n                </Grid> */}\n                <Grid item />\n                {/* <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Email Verified\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Disabling this will automatically send the user a verification\n                    email\n                  </Typography>\n                  <Switch\n                    checked={values.verified}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"verified\"\n                    onChange={handleChange}\n                    value={values.verified}\n                  />\n                </Grid> */}\n                {/* <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Discounted Prices\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    This will give the user discountedprices for all products\n                  </Typography>\n                  <Switch\n                    checked={values.discountedPrices}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"discountedPrices\"\n                    onChange={handleChange}\n                    value={values.discountedPrices}\n                  />\n                </Grid> */}\n              </Grid>\n              <Box mt={2}>\n\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n\n                >\n                  Update User\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nUserEditForm.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\n\nexport default UserEditForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link\n          variant=\"body1\"\n          color=\"inherit\"\n          to=\"/admin\"\n          component={RouterLink}\n        >\n          Management\n        </Link>\n        <Typography\n          variant=\"body1\"\n          color=\"textPrimary\"\n        >\n          Users\n        </Typography>\n      </Breadcrumbs>\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Edit User\n      </Typography>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, {\n  useState,\n  useCallback,\n  useEffect\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport UserEditForm from './UserEditForm';\nimport Header from './Header';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction UserEditView() {\n  const classes = useStyles();\n  const { userId } = useParams();\n  const isMountedRef = useIsMountedRef();\n  const [user, setUser] = useState();\n\n  const getUser = useCallback(() => {\n    axios\n      .get(`http://localhost:5000/admin/singleUser/${userId}`)\n      .then((response) => {\n        if (isMountedRef.current) {\n          setUser(response.data);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getUser();\n  }, [getUser]);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"User Edit\"\n    >\n      <Container maxWidth=\"lg\">\n        <Header />\n        <Box mt={3}>\n          <UserEditForm user={user} />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default UserEditView;\n"],"sourceRoot":""}