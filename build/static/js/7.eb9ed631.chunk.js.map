{"version":3,"sources":["views/auth/RegisterView/RegisterForm.js","views/auth/RegisterView/index.js"],"names":["useStyles","makeStyles","root","RegisterForm","className","onSubmitSuccess","rest","classes","dispatch","useDispatch","initialValues","username","userid","email","password","validationSchema","Yup","shape","max","required","min","onSubmit","values","a","setErrors","setStatus","setSubmitting","register","success","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","clsx","TextField","error","Boolean","fullWidth","helperText","label","margin","name","onBlur","onChange","type","value","variant","Box","mt","Button","color","enabled","size","default","theme","justifyContent","backgroundColor","palette","background","dark","display","height","minHeight","flexDirection","paddingBottom","paddingTop","RegisterView","history","useHistory","Page","title","Container","maxWidth","mb","alignItems","to","Logo","component","RouterLink","backButton","Card","CardContent","Typography","gutterBottom","push","my","Divider","Link"],"mappings":"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","file":"static/js/7.eb9ed631.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport { register } from 'src/store/actions/accountActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction RegisterForm({ className, onSubmitSuccess, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        userid: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        username: Yup.string().max(255).required('User name is required'),\n        userid: Yup.string().max(255).required('UserID is required'),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().min(7).max(255).required('Password is required'),\n\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await dispatch(register(values));\n          onSubmitSuccess();\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n\n          <TextField\n            error={Boolean(touched.username && errors.username)}\n            fullWidth\n            helperText={touched.username && errors.username}\n            label=\"User Name\"\n            margin=\"normal\"\n            name=\"username\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"username\"\n            value={values.username}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.userid && errors.userid)}\n            fullWidth\n            helperText={touched.userid && errors.userid}\n            label=\"UserID\"\n            margin=\"normal\"\n            name=\"userid\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"userid\"\n            value={values.userid}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              enabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Create account\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nRegisterForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\n\nRegisterForm.default = {\n  onSubmitSuccess: () => {}\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Divider,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Logo from 'src/components/Logo';\nimport RegisterForm from './RegisterForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    height: '100%',\n    minHeight: '100%',\n    flexDirection: 'column',\n    paddingBottom: 80,\n    paddingTop: 80\n  }\n}));\n\nfunction RegisterView() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmitSuccess = () => {\n    history.push('/app');\n  };\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Register\"\n    >\n      <Container maxWidth=\"sm\">\n        <Box\n          mb={5}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <RouterLink to=\"/\">\n            <Logo />\n          </RouterLink>\n          <Button\n            component={RouterLink}\n            to=\"/\"\n            className={classes.backButton}\n          >\n            Back to home\n          </Button>\n        </Box>\n        <Card>\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h2\"\n              color=\"textPrimary\"\n            >\n              Sign up\n            </Typography>\n            <Typography variant=\"subtitle1\">\n              Sign up on the internal platform\n            </Typography>\n            <Box mt={3}>\n              <RegisterForm onSubmitSuccess={handleSubmitSuccess} />\n            </Box>\n            <Box my={2}>\n              <Divider />\n            </Box>\n            <Link\n              component={RouterLink}\n              to=\"/login\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              Have an account?\n            </Link>\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n\nexport default RegisterView;\n"],"sourceRoot":""}