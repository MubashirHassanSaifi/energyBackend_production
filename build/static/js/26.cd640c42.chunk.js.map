{"version":3,"sources":["../node_modules/@material-ui/icons/NavigateNext.js","utils/wait.js","views/management/UserCreateView/Header.js","views/management/UserCreateView/UserCreateForm.js","views/management/UserCreateView/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","wait","time","Promise","res","setTimeout","useStyles","makeStyles","root","Header","className","rest","classes","clsx","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","UserCreateForm","enqueueSnackbar","useSnackbar","history","useHistory","initialValues","country","email","fullName","sensorName","password","phone","state","region","validationSchema","Yup","shape","max","lowercase","required","min","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","body","username","userid","config","headers","axios","post","success","action","Button","onClick","push","console","log","response","data","submit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Card","CardContent","Grid","container","spacing","item","md","xs","TextField","error","Boolean","fullWidth","helperText","label","name","onBlur","onChange","type","Box","mt","disabled","FormHelperText","theme","backgroundColor","palette","background","dark","minHeight","maxWidth","paddingTop","paddingBottom","CustomerCreateView","Page","title","Container"],"mappings":"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","file":"static/js/26.cd640c42.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'NavigateNext');\n\nexports.default = _default;","export const wait = (time) => new Promise((res) => setTimeout(res, time));\n\nexport default wait;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link\n          variant=\"body1\"\n          color=\"inherit\"\n          to=\"/admin/welcome\"\n          component={RouterLink}\n        >\n          Management\n        </Link>\n        <Typography\n          variant=\"body1\"\n          color=\"textPrimary\"\n        >\n          Users\n        </Typography>\n      </Breadcrumbs>\n      <Typography\n        variant=\"h4\"\n        color=\"textPrimary\"\n      >\n        Create new User\n      </Typography>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport {\n  Formik\n} from 'formik';\nimport {\n  useSnackbar\n} from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  FormHelperText,\n  makeStyles,\n\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\n\nfunction UserCreateForm({\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  return (\n    <Formik\n      initialValues={\n      {\n        country: '',\n        email: '',\n        fullName: '',\n        sensorName: '',\n        password: '',\n        phone: '',\n        state: '',\n        region: ''\n\n      }\n    }\n      validationSchema={\n      Yup.object().shape({\n        country: Yup.string().max(255),\n        sensorName: Yup.string().lowercase().max(255).required(),\n        email: Yup.string().email('Must be a valid email').max(255).required(),\n        fullName: Yup.string().max(255).required(),\n        password: Yup.string().min(8).max(255).required(),\n        phone: Yup.string().max(15).min(11),\n        state: Yup.string().max(255),\n        region: Yup.string().max(255)\n      })\n    }\n      onSubmit={\n      async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          const body = {\n            username: values.fullName,\n            userid: values.sensorName,\n            email: values.email,\n            password: values.password,\n            phone: values.phone,\n            country: values.country,\n            region: values.region,\n            state: values.state\n          };\n          const config = {\n            headers: {\n              'content-type': 'application/json'\n            }\n          };\n          const res = await axios.post('http://localhost:5000/user/register', body, config);\n          await wait(300);\n          resetForm();\n          setStatus({\n            success: true\n          });\n          setSubmitting(false);\n\n          enqueueSnackbar('User is Added', {\n            //\n            variant: 'success',\n            // autoHideDuration: 1000,\n            action: <Button onClick={() => { history.push('/admin/welcome'); }}>See All</Button>\n          });\n        } catch (error) {\n          console.log(error.response.data);\n          setStatus({\n            success: false\n          });\n          setErrors({\n            submit: error.response.data\n          });\n          setSubmitting(false);\n        }\n      }\n    }\n    >\n      {\n      ({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={\n          clsx(classes.root, className)\n        }\n          onSubmit={\n          handleSubmit\n        }\n          {\n          ...rest\n        }\n        >\n\n          <Card>\n            <CardContent>\n\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.fullName && errors.fullName)}\n                    fullWidth\n                    helperText={touched.fullName && errors.fullName}\n                    label=\"Full name\"\n                    name=\"fullName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.fullName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.sensorName && errors.sensorName)}\n                    fullWidth\n                    helperText={touched.sensorName && errors.sensorName}\n                    label=\"Sensor name\"\n                    name=\"sensorName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.sensorName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {' '}\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {' '}\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.password && errors.password)}\n                    fullWidth\n                    helperText={touched.password && errors.password}\n                    type=\"password\"\n                    label=\"Password\"\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.password}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {' '}\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {' '}\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.state && errors.state)}\n                    fullWidth\n                    helperText={touched.state && errors.state}\n                    label=\"State\"\n                    name=\"state\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.state}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {' '}\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                {' '}\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.region && errors.region)}\n                    fullWidth\n                    helperText={touched.region && errors.region}\n                    label=\"Region\"\n                    name=\"region\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.region}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n\n\n              </Grid>\n              <Box mt={2}>\n\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                >\n                  Create User\n                  {' '}\n                </Button>\n                {\n                  errors.submit && (\n                  <Box mt={3}>\n                    <FormHelperText error>\n                      {errors.submit}\n                    </FormHelperText>\n                    {' '}\n                  </Box>\n                  )\n                }\n              </Box>\n              {' '}\n\n            </CardContent>\n          </Card>\n          {' '}\n\n        </form>\n      )\n    }\n    </Formik>\n  );\n}\n\nUserCreateForm.propTypes = {\n  className: PropTypes.string\n\n};\n\nexport default UserCreateForm;\n","import React from 'react';\nimport { Container, makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Header from './Header';\nimport UserCreateForm from './UserCreateForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    maxWidth: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction CustomerCreateView() {\n  const classes = useStyles();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"User Create\"\n    >\n      <Container>\n        <Header />\n        <UserCreateForm />\n      </Container>\n    </Page>\n  );\n}\n\nexport default CustomerCreateView;\n"],"sourceRoot":""}