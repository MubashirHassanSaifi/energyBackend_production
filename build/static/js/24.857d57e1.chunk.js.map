{"version":3,"sources":["../node_modules/@material-ui/icons/NavigateNext.js","hooks/useIsMountedRef.js","utils/wait.js","views/pages/AccountView/Header.js","views/pages/AccountView/General/ProfileDetails.js","views/pages/AccountView/General/GeneralSettings.js","views/pages/AccountView/General/index.js","views/pages/AccountView/Subscription.js","views/pages/AccountView/Notifications.js","views/pages/AccountView/Security.js","views/pages/AccountView/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useIsMountedRef","isMounted","useRef","useEffect","current","wait","time","Promise","res","setTimeout","useStyles","makeStyles","root","Header","className","rest","classes","clsx","Breadcrumbs","separator","fontSize","aria-label","Link","color","to","component","RouterLink","Typography","variant","theme","name","marginTop","spacing","avatar","height","width","ProfileDetails","user","useSelector","state","account","Card","CardContent","Box","display","alignItems","flexDirection","textAlign","Avatar","src","gutterBottom","username","CardActions","Button","fullWidth","stateOptions","GeneralSettings","dispatch","useDispatch","enqueueSnackbar","useSnackbar","enableReinitialize","initialValues","canHire","country","email","firstName","isPublic","lastName","phone","validationSchema","Yup","shape","max","required","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","updateProfile","success","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","CardHeader","title","Divider","Grid","container","item","md","xs","TextField","error","Boolean","helperText","label","onBlur","onChange","type","select","SelectProps","native","map","key","Switch","checked","edge","mt","FormHelperText","p","justifyContent","disabled","General","lg","xl","overview","padding","flexWrap","breakpoints","down","productImage","marginRight","details","Subscription","Notifications","Security","oldpassword","newpassword","passwordConfirm","min","oneOf","body","userid","config","headers","axios","post","process","console","log","response","data","sm","enabled","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","AccountView","useState","currentTab","setCurrentTab","Page","Container","maxWidth","Tabs","event","scrollButtons","textColor","tabs","tab","Tab"],"mappings":"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","file":"static/js/24.857d57e1.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'NavigateNext');\n\nexports.default = _default;","import { useRef, useEffect } from 'react';\n\nexport default function useIsMountedRef() {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n}\n","export const wait = (time) => new Promise((res) => setTimeout(res, time));\n\nexport default wait;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Typography,\n  Breadcrumbs,\n  Link,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link color=\"inherit\" to=\"/app\" component={RouterLink}>\n          Dashboard\n        </Link>\n        <Typography color=\"textPrimary\">\n          Account\n        </Typography>\n      </Breadcrumbs>\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Settings\n      </Typography>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  name: {\n    marginTop: theme.spacing(1)\n  },\n  avatar: {\n    height: 100,\n    width: 100\n  }\n}));\n\nfunction ProfileDetails({ className, ...rest }) {\n  const classes = useStyles();\n  const user = useSelector((state) => state.account.user);\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <CardContent>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          textAlign=\"center\"\n        >\n          <Avatar\n            className={classes.avatar}\n            src={user.avatar}\n          />\n          <Typography\n            className={classes.name}\n            gutterBottom\n            variant=\"h3\"\n            color=\"textPrimary\"\n          >\n            {`${user.username}`}\n          </Typography>\n          {/* <Typography\n            color=\"textPrimary\"\n            variant=\"body1\"\n          >\n            {`${user.state}, ${user.country}`}\n          </Typography>\n          <Typography\n            color=\"textSecondary\"\n            variant=\"body2\"\n          >\n            {user.timezone}\n          </Typography> */}\n        </Box>\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth\n          variant=\"text\"\n        >\n          Change picture\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nProfileDetails.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\n\nexport default ProfileDetails;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  FormHelperText,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { updateProfile } from 'src/store/actions/accountActions';\n\nconst stateOptions = ['Alabama', 'New York', 'San Francisco'];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction GeneralSettings({ user, className, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        canHire: user.canHire,\n        country: user.country,\n        email: user.email,\n        firstName: user.firstName,\n        isPublic: user.isPublic,\n        lastName: user.lastName,\n        phone: user.phone,\n        state: user.state,\n      }}\n      validationSchema={Yup.object().shape({\n        country: Yup.string().max(255).required('Country is required'),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        firstName: Yup.string().max(255).required('First name is required'),\n        lastName: Yup.string().max(255).required('Last name is required')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await dispatch(updateProfile(values));\n          resetForm();\n          setStatus({ success: true });\n          enqueueSnackbar('Profile updated', {\n            variant: 'success'\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n        } finally {\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Card\n            className={clsx(classes.root, className)}\n            {...rest}\n          >\n            <CardHeader title=\"Profile\" />\n            <Divider />\n            <CardContent>\n              <Grid\n                container\n                spacing={4}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.firstName && errors.firstName)}\n                    fullWidth\n                    helperText={touched.firstName && errors.firstName}\n                    label=\"First Name\"\n                    name=\"firstName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"firstName\"\n                    value={values.firstName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.lastName && errors.lastName)}\n                    fullWidth\n                    helperText={touched.lastName && errors.lastName}\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"lastName\"\n                    value={values.lastName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email ? errors.email : 'We will use this email to contact you'}\n                    label=\"Email Address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone Number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    fullWidth\n                    label=\"Select State\"\n                    name=\"state\"\n                    onChange={handleChange}\n                    select\n                    SelectProps={{ native: true }}\n                    value={values.state}\n                    variant=\"outlined\"\n                  >\n                    {stateOptions.map((state) => (\n                      <option\n                        key={state}\n                        value={state}\n                      >\n                        {state}\n                      </option>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"country\"\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    color=\"textPrimary\"\n                  >\n                    Make Contact Info Public\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Means that anyone viewing your profile will be able to see your\n                    contacts details\n                  </Typography>\n                  <Switch\n                    checked={values.isPublic}\n                    edge=\"start\"\n                    name=\"isPublic\"\n                    onChange={handleChange}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    color=\"textPrimary\"\n                  >\n                    Available to hire\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Toggling this will let your teammates know that you are available\n                    for acquiring new projects\n                  </Typography>\n                  <Switch\n                    checked={values.canHire}\n                    edge=\"start\"\n                    name=\"canHire\"\n                    onChange={handleChange}\n                  />\n                </Grid>\n              </Grid>\n              {errors.submit && (\n                <Box mt={3}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n            </CardContent>\n            <Divider />\n            <Box\n              p={2}\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n            >\n              <Button\n                color=\"secondary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Save Changes\n              </Button>\n            </Box>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\n\nexport default GeneralSettings;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport ProfileDetails from './ProfileDetails';\nimport GeneralSettings from './GeneralSettings';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction General({ className, ...rest }) {\n  const classes = useStyles();\n  const { user } = useSelector((state) => state.account);\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n      {...rest}\n    >\n      <Grid\n        item\n        lg={4}\n        md={6}\n        xl={3}\n        xs={12}\n      >\n        <ProfileDetails user={user} />\n      </Grid>\n      <Grid\n        item\n        lg={8}\n        md={6}\n        xl={9}\n        xs={12}\n      >\n        <GeneralSettings user={user} />\n      </Grid>\n    </Grid>\n  );\n}\n\nGeneral.propTypes = {\n  className: PropTypes.string\n};\n\nexport default General;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Link,\n  Paper,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  overview: {\n    padding: theme.spacing(3),\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column-reverse',\n      alignItems: 'flex-start'\n    }\n  },\n  productImage: {\n    marginRight: theme.spacing(1),\n    height: 48,\n    width: 48\n  },\n  details: {\n    padding: theme.spacing(3),\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n      alignItems: 'flex-start'\n    }\n  }\n}));\n\nfunction Subscription({ className, ...rest }) {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [subscription, setSubscription] = useState(null);\n\n  const getSubscription = useCallback(() => {\n    axios\n      .get('/api/account/subscription')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setSubscription(response.data.subscription);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getSubscription();\n  }, [getSubscription]);\n\n  if (!subscription) {\n    return null;\n  }\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <CardHeader title=\"Manage your subscription\" />\n      <Divider />\n      <CardContent>\n        <Paper variant=\"outlined\">\n          <Box className={classes.overview}>\n            <div>\n              <Typography\n                display=\"inline\"\n                variant=\"h4\"\n                color=\"textPrimary\"\n              >\n                {subscription.currency}\n                {subscription.price}\n              </Typography>\n              <Typography\n                display=\"inline\"\n                variant=\"subtitle1\"\n              >\n                /mo\n              </Typography>\n            </div>\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n            >\n              <img\n                alt=\"Product\"\n                className={classes.productImage}\n                src=\"/static/images/products/product_freelancer.svg\"\n              />\n              <Typography\n                variant=\"overline\"\n                color=\"textSecondary\"\n              >\n                {subscription.name}\n              </Typography>\n            </Box>\n          </Box>\n          <Divider />\n          <Box className={classes.details}>\n            <div>\n              <Typography\n                variant=\"body2\"\n                color=\"textPrimary\"\n              >\n                {`${subscription.proposalsLeft} proposals left`}\n              </Typography>\n              <Typography\n                variant=\"body2\"\n                color=\"textPrimary\"\n              >\n                {`${subscription.templatesLeft} templates`}\n              </Typography>\n            </div>\n            <div>\n              <Typography\n                variant=\"body2\"\n                color=\"textPrimary\"\n              >\n                {`${subscription.invitesLeft} invites left`}\n              </Typography>\n              <Typography\n                variant=\"body2\"\n                color=\"textPrimary\"\n              >\n                {`${subscription.adsLeft} ads left`}\n              </Typography>\n            </div>\n            <div>\n              {subscription.hasAnalytics && (\n                <Typography\n                  variant=\"body2\"\n                  color=\"textPrimary\"\n                >\n                  Analytics dashboard\n                </Typography>\n              )}\n              {subscription.hasEmailAlerts && (\n                <Typography\n                  variant=\"body2\"\n                  color=\"textPrimary\"\n                >\n                  Email alerts\n                </Typography>\n              )}\n            </div>\n          </Box>\n        </Paper>\n        <Box\n          mt={2}\n          display=\"flex\"\n          justifyContent=\"flex-end\"\n        >\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            variant=\"contained\"\n          >\n            Upgrade plan\n          </Button>\n        </Box>\n        <Box mt={2}>\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n          >\n            The refunds don&apos;t work once you have the subscription, but you can\n            always\n            {' '}\n            <Link\n              color=\"secondary\"\n              component={RouterLink}\n              to=\"#\"\n            >\n              Cancel your subscription\n            </Link>\n            .\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n\nSubscription.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Subscription;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  Grid,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Notifications({ className, ...rest }) {\n  const classes = useStyles();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Make API request\n    await wait(500);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Card\n        className={clsx(classes.root, className)}\n        {...rest}\n      >\n        <CardHeader title=\"Notifications\" />\n        <Divider />\n        <CardContent>\n          <Grid\n            container\n            spacing={6}\n            wrap=\"wrap\"\n          >\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n                color=\"textPrimary\"\n              >\n                System\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n                color=\"textSecondary\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <div>\n                <FormControlLabel\n                  control={(\n                    <Checkbox defaultChecked />\n                  )}\n                  label=\"Email alerts\"\n                />\n              </div>\n              <div>\n                <FormControlLabel\n                  control={<Checkbox />}\n                  label=\"Push Notifications\"\n                />\n              </div>\n              <div>\n                <FormControlLabel\n                  control={(\n                    <Checkbox defaultChecked />\n                  )}\n                  label=\"Text message\"\n                />\n              </div>\n              <div>\n                <FormControlLabel\n                  control={(\n                    <Checkbox defaultChecked />\n                  )}\n                  label={(\n                    <>\n                      <Typography\n                        variant=\"body1\"\n                        color=\"textPrimary\"\n                      >\n                        Phone calls\n                      </Typography>\n                      <Typography variant=\"caption\">\n                        Short voice phone updating you\n                      </Typography>\n                    </>\n                  )}\n                />\n              </div>\n            </Grid>\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n                color=\"textPrimary\"\n              >\n                Chat App\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n                color=\"textSecondary\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <div>\n                <FormControlLabel\n                  control={(\n                    <Checkbox defaultChecked />\n                  )}\n                  label=\"Email\"\n                />\n              </div>\n              <div>\n                <FormControlLabel\n                  control={(\n                    <Checkbox defaultChecked />\n                  )}\n                  label=\"Push notifications\"\n                />\n              </div>\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <Box\n          p={2}\n          display=\"flex\"\n          justifyContent=\"flex-end\"\n        >\n          <Button\n            color=\"secondary\"\n            type=\"submit\"\n            variant=\"contained\"\n          >\n            Save Settings\n          </Button>\n        </Box>\n      </Card>\n    </form>\n  );\n}\n\nNotifications.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Notifications;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  FormHelperText,\n  Grid,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\nimport axios from 'axios';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Security({ className, ...rest }) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const user = useSelector((state) => state.account.user);\n\n  return (\n    <Formik\n      initialValues={{\n        oldpassword: '',\n        newpassword: '',\n        passwordConfirm: ''\n      }}\n      validationSchema={Yup.object().shape({\n        oldpassword: Yup.string()\n          .min(7, '')\n          .max(255)\n          .required('Required'),\n        newpassword: Yup.string()\n          .min(7, 'Must be at least 7 characters')\n          .max(255)\n          .required('Required'),\n\n        passwordConfirm: Yup.string()\n          .oneOf([Yup.ref('newpassword'), null], 'Passwords must match')\n          .required('Required')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          const body = {\n            oldpassword: values.oldpassword,\n            newpassword: values.newpassword,\n            userid: user.userid\n          };\n\n          const config = {\n            headers: {\n              'content-type': 'application/json'\n            }\n          };\n          const res = await axios.post(`${process.env.REACT_APP_URL}/user/changePassword`, body, config);\n          if (res) {\n            console.log(res);\n          }\n          await wait(500);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Password updated', {\n            variant: 'success'\n          });\n        } catch (error) {\n          console.log(error.response.data);\n          setStatus({ success: false });\n          setErrors({ submit: error.response.data });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Card\n            className={clsx(classes.root, className)}\n            {...rest}\n          >\n            <CardHeader title=\"Change Password\" />\n            <Divider />\n            <CardContent>\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={4}\n                  sm={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.oldpassword && errors.oldpassword)}\n                    fullWidth\n                    helperText={touched.oldpassword && errors.oldpassword}\n                    label=\"Old Password\"\n                    name=\"oldpassword\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.oldpassword}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={4}\n                  sm={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.newpassword && errors.newpassword)}\n                    fullWidth\n                    helperText={touched.newpassword && errors.newpassword}\n                    label=\"new Password\"\n                    name=\"newpassword\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.newpassword}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={4}\n                  sm={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.passwordConfirm && errors.passwordConfirm)}\n                    fullWidth\n                    helperText={touched.passwordConfirm && errors.passwordConfirm}\n                    label=\"Password Confirmation\"\n                    name=\"passwordConfirm\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.passwordConfirm}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              {errors.submit && (\n                <Box mt={3}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n            </CardContent>\n            <Divider />\n            <Box\n              p={2}\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n            >\n              <Button\n                color=\"secondary\"\n                enabled={isSubmitting}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Change Password\n              </Button>\n            </Box>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nSecurity.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Security;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Divider,\n  Tab,\n  Tabs,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Header from './Header';\nimport General from './General';\nimport Subscription from './Subscription';\nimport Notifications from './Notifications';\nimport Security from './Security';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction AccountView() {\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState('general');\n  const tabs = [\n    { value: 'general', label: 'General' },\n    // { value: 'subscription', label: 'Subscription' },\n    // { value: 'notifications', label: 'Notifications' },\n    { value: 'security', label: 'Security' }\n  ];\n\n  const handleTabsChange = (event, value) => {\n    setCurrentTab(value);\n  };\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Settings\"\n    >\n      <Container maxWidth=\"lg\">\n        <Header />\n        <Box mt={3}>\n          <Tabs\n            onChange={handleTabsChange}\n            scrollButtons=\"auto\"\n            value={currentTab}\n            variant=\"scrollable\"\n            textColor=\"secondary\"\n            className={classes.tabs}\n          >\n            {tabs.map((tab) => (\n              <Tab\n                key={tab.value}\n                label={tab.label}\n                value={tab.value}\n              />\n            ))}\n          </Tabs>\n        </Box>\n        <Divider />\n        <Box mt={3}>\n          {currentTab === 'general' && <General />}\n          {/* {currentTab === 'subscription' && <Subscription />}\n          {currentTab === 'notifications' && <Notifications />} */}\n          {currentTab === 'security' && <Security />}\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default AccountView;\n"],"sourceRoot":""}